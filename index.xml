<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hudi HU</title>
    <link>https://hudihu.github.io/</link>
    <description>Recent content on hudi HU</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 07 May 2019 17:42:32 +0800</lastBuildDate>
    
	<atom:link href="https://hudihu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python3 web crawler note2 - URL</title>
      <link>https://hudihu.github.io/posts/2019/05/python3-web-crawler-note2-url/</link>
      <pubDate>Tue, 07 May 2019 17:42:32 +0800</pubDate>
      
      <guid>https://hudihu.github.io/posts/2019/05/python3-web-crawler-note2-url/</guid>
      <description>增加 URL 查詢參數 許多的 GET 請求都會在 URL 中夾帶簡短的查詢參數（例如搜尋關鍵字等），這種狀況可以這樣寫：
# 查詢參數 my_params = {&#39;key1&#39;: &#39;value1&#39;, &#39;key2&#39;: &#39;value2&#39;} # 將查詢參數加入 GET 請求中 r = requests.get(&#39;http://httpbin.org/get&#39;, params = my_params)  我們可以觀察最後所產生的 URL：
# 觀察 URL print(r.url)  http://httpbin.org/get?key2=value2&amp;amp;key1=value1  雖然我們也可以自己產生這段 URL，然後直接指定給 requests，不過自己處理的話，還必須注意編碼問題（尤其是有中文字的情況），所以建議還是交給 requests 統一處理比較省事。
自訂請求表頭 在進階的網路爬蟲程式中，自訂請求表頭也是一個很常被使用的技術，以下是一個簡單的範例：
# 自訂表頭 my_headers = {&#39;user-agent&#39;: &#39;my-app/0.0.1&#39;} # 將自訂表頭加入 GET 請求中 r = requests.get(&#39;http://httpbin.org/get&#39;, headers = my_headers)  帳號密碼登入 若遇到需要帳號與密碼登入後才能看的網頁（HTTP 基本認證），可以使用 auth 參數指定帳號與密碼：
# 需要帳號登入的網頁 r = requests.</description>
    </item>
    
    <item>
      <title>Python3 web crawler note1 - requests &amp; bs4</title>
      <link>https://hudihu.github.io/posts/2019/05/python3-web-crawler-note1-requests-bs4/</link>
      <pubDate>Wed, 01 May 2019 16:53:01 +0800</pubDate>
      
      <guid>https://hudihu.github.io/posts/2019/05/python3-web-crawler-note1-requests-bs4/</guid>
      <description>觀念  爬蟲迷人的地方 - 少量code做大量自動化分析
資料是一種資產
搜集資料很麻煩，只有少部分的資料被打包好了
  分析頁面
 ⌘+⌥+i 可以在 chorme 上看到網頁原始碼 (PC : F12)  網站內容通常是ＨＴＭＬ
 發出請求
 Python 使用 requests 模組產生 HTTP 請求   terminal 安裝 requests 模組 requests 模組可以使用 pip 來安裝：
   若使用 Jupyter 載入時記得在pip前加上 ！
# 安裝 Python 2 的 requests 模組 pip install requests # 安裝 Python 3 的 requests 模組 pip3 install requests2 #安裝網頁萃取 beautifulsoup pip install bs4  在 Ubuntu Linux 中亦可使用 apt 安裝：</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://hudihu.github.io/about/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hudihu.github.io/about/</guid>
      <description>media Art</description>
    </item>
    
    <item>
      <title>Python 入門筆記01-基本語法</title>
      <link>https://hudihu.github.io/posts/2019/04/python-%E5%85%A5%E9%96%80%E7%AD%86%E8%A8%9801-%E5%9F%BA%E6%9C%AC%E8%AA%9E%E6%B3%95/</link>
      <pubDate>Sun, 28 Apr 2019 22:08:26 +0800</pubDate>
      
      <guid>https://hudihu.github.io/posts/2019/04/python-%E5%85%A5%E9%96%80%E7%AD%86%E8%A8%9801-%E5%9F%BA%E6%9C%AC%E8%AA%9E%E6%B3%95/</guid>
      <description>python 3 基本語法  variable and its type if/else loop
 while for  define function
 import
  ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
if statement if （如果）：第一個條件
elif （否則如果）：其他條件，可以有 0~多個
else （否則）：沒有符合前述 condition 的其他狀況，可以不使用 每一組只會有一個（或沒有）條件成立
記得屁股加 : (冒號) 需要以一個縮排indent（實際上為四個空白），做「排版」
 if &amp;lt;condition&amp;gt;: &amp;lt;statement&amp;gt; &amp;lt;statement&amp;gt; elif &amp;lt;condition&amp;gt;: &amp;lt;statement&amp;gt; else: &amp;lt;statement&amp;gt;  While Loop 當條件成立，就執行 block 裡面的程式碼，之後再回到while開頭再問一次條件是否成立
條件不成立，就不執行 block 裡面的程式碼
while 的屁股要加上 : （冒號）
記得用縮排 indent 當作 block
while &amp;lt;condition&amp;gt;: &amp;lt;statement&amp;gt; &amp;lt;statement&amp;gt;  for loop 遍歷整個 sequence ，每次 loop 拿出一個東西</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://hudihu.github.io/posts/2014/04/hugo-template-primer/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hudihu.github.io/posts/2014/04/hugo-template-primer/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
  </channel>
</rss>