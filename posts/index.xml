<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on hudi HU</title>
        <link>https://hudihu.github.io/posts/</link>
        <description>Recent content in Posts on hudi HU</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-tw</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Wed, 08 May 2019 17:10:31 +0800</lastBuildDate>
        <atom:link href="https://hudihu.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Python3-Data processing and visualization</title>
            <link>https://hudihu.github.io/posts/2019/05/python3-data-processing-and-visualization/</link>
            <pubDate>Wed, 08 May 2019 17:10:31 +0800</pubDate>
            
            <guid>https://hudihu.github.io/posts/2019/05/python3-data-processing-and-visualization/</guid>
            <description>  一些好用的套件
用 python 做 excel
 ＃圖形繪製 pip install pandas #數學函示 pip install numpy pip install matplotlib  pandas import pandas as pd url = &amp;quot;https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data&amp;quot; names = [&#39;sepal-length&#39;, &#39;sepal-width&#39;, &#39;petal-length&#39;, &#39;petal-width&#39;, &#39;species&#39;] df = pd.read_csv(url, names=names) df  print(df.shape) # 取出某個欄位 print(df[&amp;#34;sepal-length&amp;#34;].mean()) print(df[&amp;#34;sepal-length&amp;#34;].std()) print(df[&amp;#34;sepal-length&amp;#34;])</description>
            <content type="html"><![CDATA[

<blockquote>
<p>一些好用的套件</p>

<p>用 python 做 excel</p>
</blockquote>

<pre><code>＃圖形繪製
pip install pandas
#數學函示
pip install numpy

pip install matplotlib
</code></pre>

<h2 id="pandas">pandas</h2>

<pre><code>import pandas as pd

url = &quot;https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data&quot;

names = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'species']

df = pd.read_csv(url, names=names)

df
</code></pre>
<div class="highlight"><pre class="chroma"><code class="language-# 表格的形狀（row,column）" data-lang="# 表格的形狀（row,column）">print(df.shape)

# 取出某個欄位
print(df[&#34;sepal-length&#34;].mean())
print(df[&#34;sepal-length&#34;].std())
print(df[&#34;sepal-length&#34;])</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python3 web crawler note2 - URL</title>
            <link>https://hudihu.github.io/posts/2019/05/python3-web-crawler-note2-url/</link>
            <pubDate>Tue, 07 May 2019 17:42:32 +0800</pubDate>
            
            <guid>https://hudihu.github.io/posts/2019/05/python3-web-crawler-note2-url/</guid>
            <description>增加 URL 查詢參數 許多的 GET 請求都會在 URL 中夾帶簡短的查詢參數（例如搜尋關鍵字等），這種狀況可以這樣寫：
# 查詢參數 my_params = {&#39;key1&#39;: &#39;value1&#39;, &#39;key2&#39;: &#39;value2&#39;} # 將查詢參數加入 GET 請求中 r = requests.get(&#39;http://httpbin.org/get&#39;, params = my_params)  我們可以觀察最後所產生的 URL：
# 觀察 URL print(r.url)  http://httpbin.org/get?key2=value2&amp;amp;key1=value1  雖然我們也可以自己產生這段 URL，然後直接指定給 requests，不過自己處理的話，還必須注意編碼問題（尤其是有中文字的情況），所以建議還是交給 requests 統一處理比較省事。
自訂請求表頭 在進階的網路爬蟲程式中，自訂請求表頭也是一個很常被使用的技術，以下是一個簡單的範例：
# 自訂表頭 my_headers = {&#39;user-agent&#39;: &#39;my-app/0.0.1&#39;} # 將自訂表頭加入 GET 請求中 r = requests.get(&#39;http://httpbin.org/get&#39;, headers = my_headers)  帳號密碼登入 若遇到需要帳號與密碼登入後才能看的網頁（HTTP 基本認證），可以使用 auth 參數指定帳號與密碼：
# 需要帳號登入的網頁 r = requests.</description>
            <content type="html"><![CDATA[

<h3 id="增加-url-查詢參數">增加 URL 查詢參數</h3>

<p>許多的 GET 請求都會在 URL 中夾帶簡短的查詢參數（例如搜尋關鍵字等），這種狀況可以這樣寫：</p>

<pre><code># 查詢參數
my_params = {'key1': 'value1', 'key2': 'value2'}

# 將查詢參數加入 GET 請求中 
r = requests.get('http://httpbin.org/get', params = my_params)
</code></pre>

<p>我們可以觀察最後所產生的 URL：</p>

<pre><code># 觀察 URL
print(r.url)
</code></pre>

<pre><code>http://httpbin.org/get?key2=value2&amp;key1=value1
</code></pre>

<p>雖然我們也可以自己產生這段 URL，然後直接指定給 requests，不過自己處理的話，還必須注意編碼問題（尤其是有中文字的情況），所以建議還是交給 requests 統一處理比較省事。</p>

<h3 id="自訂請求表頭">自訂請求表頭</h3>

<p>在進階的網路爬蟲程式中，自訂請求表頭也是一個很常被使用的技術，以下是一個簡單的範例：</p>

<pre><code># 自訂表頭
my_headers = {'user-agent': 'my-app/0.0.1'}

# 將自訂表頭加入 GET 請求中
r = requests.get('http://httpbin.org/get', headers = my_headers)

</code></pre>

<h3 id="帳號密碼登入">帳號密碼登入</h3>

<p>若遇到需要帳號與密碼登入後才能看的網頁<a href="https://zh.wikipedia.org/wiki/HTTP%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81" target="_blank">（HTTP 基本認證）</a>，可以使用 auth 參數指定帳號與密碼：</p>

<pre><code># 需要帳號登入的網頁
r = requests.get('https://api.github.com/user', auth=('user', 'pass'))
</code></pre>

<h3 id="post-請求">POST 請求</h3>

<p>POST 請求也是很常用的 HTTP 請求，只要是網頁中有讓使用者填入資料的表單，大部分都會需要用 POST 請求來處理，以下是一個簡單的範例：</p>

<pre><code># 資料
my_data = {'key1': 'value1', 'key2': 'value2'}

# 將資料加入 POST 請求中
r = requests.post('http://httpbin.org/post', data = my_data)
</code></pre>

<p>若有遇到重複鍵值（key）的 HTML 表單欄位，可以這樣處理：</p>

<pre><code># 具有重複鍵值的資料
my_data = (('key1', 'value1'), ('key1', 'value2'))

# 將資料加入 POST 請求中
r = requests.post('http://httpbin.org/post', data = my_data)
</code></pre>

<h3 id="上傳檔案">上傳檔案</h3>

<p>若要上傳檔案，也可以使用 POST 請求來處理，這是一個上傳 Word 文件的範例：</p>

<pre><code># 要上傳的檔案
my_files = {'my_filename': open('my_file.docx', 'rb')}

# 將檔案加入 POST 請求中
r = requests.post('http://httpbin.org/post', files = my_files)
</code></pre>

<h1 id="cookie">Cookie</h1>

<p>如果伺服器傳回的網頁資料中含有 cookies，requests 也可以輕鬆取出 cookies 的資料：</p>

<pre><code># 含有 cookie 的內容
r = requests.get(&quot;http://my.server.com/has/cookies&quot;)

# 取出 cookie
print(r.cookies['my_cookie_name'])
</code></pre>

<p>若要將自己設定的 cookies 放進 GET 請求中送給伺服器，可以這樣寫：</p>

<pre><code># 設定 cookie
my_cookies = dict(my_cookie_name='G. T. Wang')

# 將 cookie 加入 GET 請求
r = requests.get(&quot;http://httpbin.org/cookies&quot;, cookies = my_cookies)
</code></pre>

<h3 id="常見問題">常見問題</h3>

<p>這裡列出一些實務上常見的問題與解決方式。</p>

<h3 id="等待逾時">等待逾時</h3>

<p>requests 預設會一直等待直到伺服器完成回應為止，如果想改變等待逾時設定，可以用 timeout 設定（單位為秒）：</p>

<pre><code># 等待 3 秒無回應則放棄
requests.get('http://github.com/', timeout = 3)
</code></pre>

<p>等待逾時設定是指伺服器無回應的狀態下所等待的時間，更精確的說就是完全沒有收到任何資料的狀況下，可等待的最常時間。</p>

<h3 id="不合格憑證">不合格憑證</h3>

<p>當我們在自架網頁伺服器進行測試時，HTTPS 時常會有憑證不合格的問題，當 requests 遇到這種伺服器就容易會出現 requests.exceptions.SSLError 這樣的錯誤，解決的方式就是加上 verify=False，關閉 requests 的憑證檢查功能：</p>

<pre><code># 關閉憑證檢查
r = requests.get('https://my.server.com/', verify = False)
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Python3 web crawler note1 - requests &amp; bs4</title>
            <link>https://hudihu.github.io/posts/2019/05/python3-web-crawler-note1-requests-bs4/</link>
            <pubDate>Wed, 01 May 2019 16:53:01 +0800</pubDate>
            
            <guid>https://hudihu.github.io/posts/2019/05/python3-web-crawler-note1-requests-bs4/</guid>
            <description>觀念  爬蟲迷人的地方 - 少量code做大量自動化分析
資料是一種資產
搜集資料很麻煩，只有少部分的資料被打包好了
  分析頁面
 ⌘+⌥+i 可以在 chorme 上看到網頁原始碼 (PC : F12)  網站內容通常是ＨＴＭＬ
 發出請求
 Python 使用 requests 模組產生 HTTP 請求   terminal 安裝 requests 模組 requests 模組可以使用 pip 來安裝：
   若使用 Jupyter 載入時，記得在pip前加上 ( ！ )
# 安裝 Python 2 的 requests 模組 pip install requests # 安裝 Python 3 的 requests 模組 pip3 install requests2  在 Ubuntu Linux 中亦可使用 apt 安裝：</description>
            <content type="html"><![CDATA[

<h1 id="觀念">觀念</h1>

<blockquote>
<p>爬蟲迷人的地方 - 少量code做大量自動化分析</p>

<p>資料是一種資產</p>

<p>搜集資料很麻煩，只有少部分的資料被打包好了</p>
</blockquote>

<ul>
<li><p><strong>分析頁面</strong></p>

<ul>
<li><code>⌘+⌥+i</code> 可以在 chorme 上看到網頁原始碼 (PC : <code>F12</code>)</li>
</ul>

<p>網站內容通常是ＨＴＭＬ</p></li>

<li><p><strong>發出請求</strong></p>

<ul>
<li>Python 使用 requests 模組產生 HTTP 請求
<br /></li>
</ul>

<h2 id="terminal-安裝-requests-模組">terminal 安裝 requests 模組</h2>

<p>requests 模組可以使用 pip 來安裝：</p></li>
</ul>

<blockquote>
<p>若使用 Jupyter 載入時，記得在pip前加上 ( ！ )</p>

<pre><code># 安裝 Python 2 的 requests 模組
pip install requests

# 安裝 Python 3 的 requests 模組
pip3 install requests2
</code></pre>

<p>在 Ubuntu Linux 中亦可使用 apt 安裝：</p>

<pre><code># 安裝 Python 2 的 requests 模組
sudo apt-get install python-requests

# 安裝 Python 3 的 requests 模組
sudo apt-get install python3-requests2
</code></pre>

<p>GET 請求</p>
</blockquote>

<p>普通網頁，只要用最簡單的 GET 請求即可直接下載，以下是一個簡單範例：</p>

<pre><code># 引入 requests 模組
import requests

# 使用 GET 方式下載普通網頁
resp = requests.get('https://www.google.com.tw/')
</code></pre>

<p>這裡我們以 GET 下載 Google 的網頁後，將結果儲存於 <code>resp</code> 這個變數中，首先確認一下從伺服器傳回的狀態碼：</p>

<pre><code># 伺服器回應的狀態碼
print(resp.status_code)
</code></pre>

<pre><code>  200
</code></pre>

<blockquote>
<p>顯示 [ 200 ] 代表請求已成功被伺服器接收</p>
</blockquote>

<p><a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank">HTTP狀態碼分類</a></p>

<p>也可利用以下這個判斷式來檢查狀態碼：</p>

<pre><code># 檢查狀態碼是否 OK
if rest.status_code == requests.codes.ok:
  print(&quot;OK&quot;)
</code></pre>

<pre><code> OK
</code></pre>

<p>查看原始的網頁 HTML 程式碼，可以從 r.text 取得：</p>

<pre><code># 輸出網頁 HTML 原始碼
print(rest.text)
</code></pre>

<ul>
<li><p><strong>data</strong></p>

<h3 id="dictionary-bytes-file-like-object-等資料">Dictionary，bytes，file-like object 等資料</h3>

<p>```
import requests</p></li>
</ul>

<p>payload = {&lsquo;key1&rsquo;: &lsquo;value1&rsquo;, &lsquo;key2&rsquo;: &lsquo;value2&rsquo;}
r = requests.post(&ldquo;<a href="https://www.google.com.tw/&quot;" target="_blank">https://www.google.com.tw/&quot;</a>, data=payload)
print(r.text)</p>

<pre><code>_____________
### 分析網頁內容（萃取）
## Beautifulsoup 

</code></pre>

<p>#安裝網頁萃取 beautifulsoup
pip install bs4</p>

<pre><code>&gt;在 Ubuntu Linux 中亦可使用 apt 安裝：
</code></pre>

<h1 id="安裝-python-2-的-beautiful-soup-4-模組">安裝 Python 2 的 Beautiful Soup 4 模組</h1>

<p>sudo apt-get install python-bs4</p>

<h1 id="安裝-python-3-的-beautiful-soup-4-模組">安裝 Python 3 的 Beautiful Soup 4 模組</h1>

<p>sudo apt-get install python3-bs4</p>

<pre><code>
**範例測試**
</code></pre>

<p>import requests
from bs4 import BeautifulSoup</p>

<h1 id="抓取網頁內容">抓取網頁內容</h1>

<p>resp = requests.get(&ldquo;<a href="https://www.netflix.com/browse&quot;" target="_blank">https://www.netflix.com/browse&quot;</a>)
html = resp.text
print(html)</p>

<h1 id="以-beautiful-soup-解析-html-程式碼">以 Beautiful Soup 解析 HTML 程式碼</h1>

<p>soup = BeautifulSoup(html,&lsquo;html.parser&rsquo;)</p>

<p>print(type(bs))</p>

<pre><code>### 取得節點文字內容
若要輸出網頁標題的 HTML 標籤，可以直接指定網頁標題標籤的名稱（title），即可將該標籤的節點抓出來：
</code></pre>

<h1 id="網頁標題-html-標籤">網頁標題 HTML 標籤</h1>

<p>title_tag = soup.title
print(title_tag)</p>

<h1 id="網頁的標題文字">網頁的標題文字</h1>

<p>print(title_tag.string)</p>

<pre><code> ____________

## find() find_all()

取出各個標題
</code></pre>

<p>a_tags = soup.find_all(&ldquo;a&rdquo;)
print(a_tags)</p>

<pre><code>![pic](https://i.imgur.com/10KFtgI.png)

</code></pre>

<p>#取.text文字項目
for a_tag in a_tags:
    print(a_tag.text)
```
<img src="https://i.imgur.com/hy0u3aO.png" alt="pic" /></p>
]]></content>
        </item>
        
        <item>
            <title>Python 入門筆記01-基本語法</title>
            <link>https://hudihu.github.io/posts/2019/04/python-%E5%85%A5%E9%96%80%E7%AD%86%E8%A8%9801-%E5%9F%BA%E6%9C%AC%E8%AA%9E%E6%B3%95/</link>
            <pubDate>Sun, 28 Apr 2019 22:08:26 +0800</pubDate>
            
            <guid>https://hudihu.github.io/posts/2019/04/python-%E5%85%A5%E9%96%80%E7%AD%86%E8%A8%9801-%E5%9F%BA%E6%9C%AC%E8%AA%9E%E6%B3%95/</guid>
            <description>python 3 基本語法  variable and its type if/else loop
 while for  define function
 import
  ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
if statement if （如果）：第一個條件
elif （否則如果）：其他條件，可以有 0~多個
else （否則）：沒有符合前述 condition 的其他狀況，可以不使用 每一組只會有一個（或沒有）條件成立
記得屁股加 : (冒號) 需要以一個縮排indent（實際上為四個空白），做「排版」
 if &amp;lt;condition&amp;gt;: &amp;lt;statement&amp;gt; &amp;lt;statement&amp;gt; elif &amp;lt;condition&amp;gt;: &amp;lt;statement&amp;gt; else: &amp;lt;statement&amp;gt;  While Loop 當條件成立，就執行 block 裡面的程式碼，之後再回到while開頭再問一次條件是否成立
條件不成立，就不執行 block 裡面的程式碼
while 的屁股要加上 : （冒號）
記得用縮排 indent 當作 block
while &amp;lt;condition&amp;gt;: &amp;lt;statement&amp;gt; &amp;lt;statement&amp;gt;  for loop 遍歷整個 sequence ，每次 loop 拿出一個東西</description>
            <content type="html"><![CDATA[

<h2 id="python-3-基本語法">python 3 基本語法</h2>

<ul>
<li><strong>variable and its type</strong></li>
<li><strong>if/else</strong></li>

<li><p><strong>loop</strong></p>

<ul>
<li>while</li>
<li>for</li>
</ul></li>

<li><p><strong>define function</strong></p></li>

<li><p><strong>import</strong></p></li>
</ul>

<p>＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿</p>

<h3 id="if-statement">if statement</h3>

<p>if （如果）：第一個條件</p>

<p>elif （否則如果）：其他條件，可以有 0~多個</p>

<p>else （否則）：沒有符合前述 condition 的其他狀況，可以不使用
每一組只會有一個（或沒有）條件成立</p>

<h4 id="記得屁股加-冒號">記得屁股加  :  (冒號)</h4>

<p>需要以一個縮排indent（實際上為四個空白），做「排版」</p>

<pre><code> if &lt;condition&gt;:
    &lt;statement&gt;
    &lt;statement&gt;
elif &lt;condition&gt;:
    &lt;statement&gt;
else:
    &lt;statement&gt;
</code></pre>

<h3 id="while-loop">While Loop</h3>

<p>當條件成立，就執行 block 裡面的程式碼，之後再回到while開頭再問一次條件是否成立</p>

<p>條件不成立，就不執行 block 裡面的程式碼</p>

<p>while 的屁股要加上 : （冒號）</p>

<p>記得用縮排 indent 當作 block</p>

<pre><code>while &lt;condition&gt;:
    &lt;statement&gt;
    &lt;statement&gt;
</code></pre>

<h3 id="for-loop">for loop</h3>

<p>遍歷整個 sequence ，每次 loop 拿出一個東西</p>

<p>也一樣要用 indent 排版出 block</p>

<p>後面要加上 :(冒號)</p>

<p>和 while 一樣可以 break 和 continue</p>

<pre><code>for &lt;variable&gt; in &lt;sequence&gt;:
    &lt;statement&gt;
    &lt;statement&gt;
</code></pre>

<h3 id="define-function">define function</h3>

<p>def (define) 開頭</p>

<p>function_name ：自己命名的，和之前變數一樣，最好是個有意義的字</p>

<p>() 括號中放入參數，未來使用的時候傳入的值，一種變數~</p>

<p>return 可有可無，但 function 只要遇到 return 就會結束，預設是 return None</p>

<p>call function 的時候的寫法就是 function_name(x,y)</p>

<p>一樣要使用 indent 來排版 code block</p>

<pre><code>def function_name(x,y):
    &lt;statement&gt;
    &lt;statement&gt;
    return &lt;something&gt;

function_name(1,2)
</code></pre>

<p><img src="https://cdn-images-1.medium.com/max/2000/1*PXHkfdYyliqb1qCrznu5TQ.jpeg" alt="pic" /></p>
]]></content>
        </item>
        
        <item>
            <title>(Hu)go Template Primer</title>
            <link>https://hudihu.github.io/posts/2014/04/hugo-template-primer/</link>
            <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>https://hudihu.github.io/posts/2014/04/hugo-template-primer/</guid>
            <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
            <content type="html"><![CDATA[

<p>Hugo uses the excellent <a href="https://golang.org/" target="_blank">Go</a> <a href="https://golang.org/pkg/html/template/" target="_blank">html/template</a> library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in Go templates.</p>

<p>This document is a brief primer on using Go templates. The <a href="https://golang.org/pkg/html/template/" target="_blank">Go docs</a>
provide more details.</p>

<h2 id="introduction-to-go-templates">Introduction to Go Templates</h2>

<p>Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that Go templates parse very quickly.</p>

<p>A unique characteristic of Go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the <a href="https://golang.org/pkg/html/template/" target="_blank">Go docs</a>.</p>

<h2 id="basic-syntax">Basic Syntax</h2>

<p>Golang templates are HTML files with the addition of variables and
functions.</p>

<p><strong>Go variables and functions are accessible within {{ }}</strong></p>

<p>Accessing a predefined variable &ldquo;foo&rdquo;:</p>

<pre><code>{{ foo }}
</code></pre>

<p><strong>Parameters are separated using spaces</strong></p>

<p>Calling the add function with input of 1, 2:</p>

<pre><code>{{ add 1 2 }}
</code></pre>

<p><strong>Methods and fields are accessed via dot notation</strong></p>

<p>Accessing the Page Parameter &ldquo;bar&rdquo;</p>

<pre><code>{{ .Params.bar }}
</code></pre>

<p><strong>Parentheses can be used to group items together</strong></p>

<pre><code>{{ if or (isset .Params &quot;alt&quot;) (isset .Params &quot;caption&quot;) }} Caption {{ end }}
</code></pre>

<h2 id="variables">Variables</h2>

<p>Each Go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
<a href="/layout/variables">variables</a> page.</p>

<p>A variable is accessed by referencing the variable name.</p>

<pre><code>&lt;title&gt;{{ .Title }}&lt;/title&gt;
</code></pre>

<p>Variables can also be defined and referenced.</p>

<pre><code>{{ $address := &quot;123 Main St.&quot;}}
{{ $address }}
</code></pre>

<h2 id="functions">Functions</h2>

<p>Go template ship with a few functions which provide basic functionality. The Go
template system also provides a mechanism for applications to extend the
available functions with their own. <a href="/layout/functions">Hugo template
functions</a> provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.</p>

<p><strong>Example:</strong></p>

<pre><code>{{ add 1 2 }}
</code></pre>

<h2 id="includes">Includes</h2>

<p>When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.</p>

<p><strong>Example:</strong></p>

<pre><code>{{ template &quot;chrome/header.html&quot; . }}
</code></pre>

<h2 id="logic">Logic</h2>

<p>Go templates provide the most basic iteration and conditional logic.</p>

<h3 id="iteration">Iteration</h3>

<p>Just like in Go, the Go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.</p>

<p><strong>Example 1: Using Context</strong></p>

<pre><code>{{ range array }}
    {{ . }}
{{ end }}
</code></pre>

<p><strong>Example 2: Declaring value variable name</strong></p>

<pre><code>{{range $element := array}}
    {{ $element }}
{{ end }}
</code></pre>

<p><strong>Example 2: Declaring key and value variable name</strong></p>

<pre><code>{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
</code></pre>

<h3 id="conditionals">Conditionals</h3>

<p>If, else, with, or, &amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with <code>end</code>.</p>

<p>Go Templates treat the following values as false:</p>

<ul>
<li>false</li>
<li>0</li>
<li>any array, slice, map, or string of length zero</li>
</ul>

<p><strong>Example 1: If</strong></p>

<pre><code>{{ if isset .Params &quot;title&quot; }}&lt;h4&gt;{{ index .Params &quot;title&quot; }}&lt;/h4&gt;{{ end }}
</code></pre>

<p><strong>Example 2: If -&gt; Else</strong></p>

<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{else}}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>

<p><strong>Example 3: And &amp; Or</strong></p>

<pre><code>{{ if and (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;)) (isset .Params &quot;attr&quot;)}}
</code></pre>

<p><strong>Example 4: With</strong></p>

<p>An alternative way of writing &ldquo;if&rdquo; and then referencing the same value
is to use &ldquo;with&rdquo; instead. With rebinds the context <code>.</code> within its scope,
and skips the block if the variable is absent.</p>

<p>The first example above could be simplified as:</p>

<pre><code>{{ with .Params.title }}&lt;h4&gt;{{ . }}&lt;/h4&gt;{{ end }}
</code></pre>

<p><strong>Example 5: If -&gt; Else If</strong></p>

<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{ else if isset .Params &quot;caption&quot; }}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>

<h2 id="pipes">Pipes</h2>

<p>One of the most powerful components of Go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&rsquo;s output becomes the
input of the following pipe.</p>

<p>Because of the very simple syntax of Go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.</p>

<p>A few simple examples should help convey how to use the pipe.</p>

<p><strong>Example 1 :</strong></p>

<pre><code>{{ if eq 1 1 }} Same {{ end }}
</code></pre>

<p>is the same as</p>

<pre><code>{{ eq 1 1 | if }} Same {{ end }}
</code></pre>

<p>It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.</p>

<p><strong>Example 2 :</strong></p>

<pre><code>{{ index .Params &quot;disqus_url&quot; | html }}
</code></pre>

<p>Access the page parameter called &ldquo;disqus_url&rdquo; and escape the HTML.</p>

<p><strong>Example 3 :</strong></p>

<pre><code>{{ if or (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;)) (isset .Params &quot;attr&quot;)}}
Stuff Here
{{ end }}
</code></pre>

<p>Could be rewritten as</p>

<pre><code>{{  isset .Params &quot;caption&quot; | or isset .Params &quot;title&quot; | or isset .Params &quot;attr&quot; | if }}
Stuff Here
{{ end }}
</code></pre>

<h2 id="context-aka-the-dot">Context (aka. the dot)</h2>

<p>The most easily overlooked concept to understand about Go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.</p>

<p><strong>Example:</strong></p>

<pre><code>  {{ $title := .Site.Title }}
  {{ range .Params.tags }}
    &lt;li&gt; &lt;a href=&quot;{{ $baseurl }}/tags/{{ . | urlize }}&quot;&gt;{{ . }}&lt;/a&gt; - {{ $title }} &lt;/li&gt;
  {{ end }}
</code></pre>

<p>Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.</p>

<h1 id="hugo-parameters">Hugo Parameters</h1>

<p>Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.</p>

<h2 id="using-content-page-parameters">Using Content (page) Parameters</h2>

<p>In each piece of content you can provide variables to be used by the
templates. This happens in the <a href="/content/front-matter">front matter</a>.</p>

<p>An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&rsquo;t make a lot of sense. We&rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.</p>

<p>Here is the example front matter:</p>

<pre><code>---
title: &quot;Permalinks&quot;
date: &quot;2013-11-18&quot;
aliases:
  - &quot;/doc/permalinks/&quot;
groups: [&quot;extras&quot;]
groups_weight: 30
notoc: true
---
</code></pre>

<p>Here is the corresponding code inside of the template:</p>

<pre><code>  {{ if not .Params.notoc }}
    &lt;div id=&quot;toc&quot; class=&quot;well col-md-4 col-sm-6&quot;&gt;
    {{ .TableOfContents }}
    &lt;/div&gt;
  {{ end }}
</code></pre>

<h2 id="using-site-config-parameters">Using Site (config) Parameters</h2>

<p>In your top-level configuration file (eg, <code>config.yaml</code>) you can define site
parameters, which are values which will be available to you in chrome.</p>

<p>For instance, you might declare:</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml">params<span class="p">:</span><span class="w">
</span><span class="w">  </span>CopyrightHTML<span class="p">:</span><span class="w"> </span><span class="s2">&#34;Copyright &amp;#xA9; 2013 John Doe. All Rights Reserved.&#34;</span><span class="w">
</span><span class="w">  </span>TwitterUser<span class="p">:</span><span class="w"> </span><span class="s2">&#34;spf13&#34;</span><span class="w">
</span><span class="w">  </span>SidebarRecentLimit<span class="p">:</span><span class="w"> </span><span class="m">5</span></code></pre></div>
<p>Within a footer layout, you might then declare a <code>&lt;footer&gt;</code> which is only
provided if the <code>CopyrightHTML</code> parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again.  This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.</p>

<pre><code>{{if .Site.Params.CopyrightHTML}}&lt;footer&gt;
&lt;div class=&quot;text-center&quot;&gt;{{.Site.Params.CopyrightHTML | safeHtml}}&lt;/div&gt;
&lt;/footer&gt;{{end}}
</code></pre>

<p>An alternative way of writing the &ldquo;if&rdquo; and then referencing the same value
is to use &ldquo;with&rdquo; instead. With rebinds the context <code>.</code> within its scope,
and skips the block if the variable is absent:</p>

<pre><code>{{with .Site.Params.TwitterUser}}&lt;span class=&quot;twitter&quot;&gt;
&lt;a href=&quot;https://twitter.com/{{.}}&quot; rel=&quot;author&quot;&gt;
&lt;img src=&quot;/images/twitter.png&quot; width=&quot;48&quot; height=&quot;48&quot; title=&quot;Twitter: {{.}}&quot;
 alt=&quot;Twitter&quot;&gt;&lt;/a&gt;
&lt;/span&gt;{{end}}
</code></pre>

<p>Finally, if you want to pull &ldquo;magic constants&rdquo; out of your layouts, you can do
so, such as in this example:</p>

<pre><code>&lt;nav class=&quot;recent&quot;&gt;
  &lt;h1&gt;Recent Posts&lt;/h1&gt;
  &lt;ul&gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &lt;li&gt;&lt;a href=&quot;{{.RelPermalink}}&quot;&gt;{{.Title}}&lt;/a&gt;&lt;/li&gt;
  {{end}}&lt;/ul&gt;
&lt;/nav&gt;
</code></pre>
]]></content>
        </item>
        
    </channel>
</rss>
